<!-- First you need to extend the CB layout -->
@extends('crudbooster::admin_template')
@section('content')
<meta name="csrf-token" content="{{ csrf_token() }}">
<link rel='stylesheet' href='https://mobilitytracker.ml/style.css'/>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@tarekraafat/autocomplete.js@10.2.6/dist/css/autoComplete.min.css">
<link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css"
   integrity="sha512-xodZBNTC5n17Xt2atTPuE1HxjVMSvLVW9ocqUKLsCC5CXdbqCmblAshOMAS6/keqq/sMZMZ19scR4PsZChSR7A=="
   crossorigin=""/>
<link rel='stylesheet' href='https://cdnjs.cloudflare.com/ajax/libs/leaflet.draw/1.0.4/leaflet.draw.css'/>
   <!-- Make sure you put this AFTER Leaflet's CSS -->
  <script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"
   integrity="sha512-XQoYMqMTK8LvdxXYG3nZ448hOEQiglfqkJs1NOQV44cWnUrBc8PkAOcXy20w0vlaXaVUearIOBhiXZ5V3ynxwA=="
   crossorigin=""></script>  
   <script src='https://cdnjs.cloudflare.com/ajax/libs/leaflet.draw/1.0.4/leaflet.draw.js'></script>
   <script src='https://unpkg.com/micromodal/dist/micromodal.min.js'></script>
   <script src='https://mobilitytracker.ml/js/leaflet.migrationLayer.js'></script>
<style type='text/css'>
@if (CRUDBooster::myPrivilegeId()==2)
.main-sidebar {display:none;}
.sidebar-toggle { display:none;}
.sidebar-mini.sidebar-collapse .content-wrapper, .sidebar-mini.sidebar-collapse .right-side, .sidebar-mini.sidebar-collapse .main-footer { margin-left:0px !important;}
@endif
.modal { z-index:105000;}
.modal__btn { font-size:20px;} 
  #timeFrom { font-size:20px;}
  #timeTo { font-size:20px;}
  .formSelector { width:440px; font-size:20px;}
    .content-header { display:none; }
    #mapComponent { height:100px; }
    .content { padding:0px; }
    #filter { width: 100px; height:100px;}
</style>

<div id='mapComponent'>
<div style="z-index:99999; padding-left: 10px;padding-right: 10px; position:absolute; right: 0px; bottom:150px;">
<button type="button" style='' id="filter" onclick="editRoutes();" class="btnStyle span3">Szukaj</button>
<br/><br/>
<button type="button" style='' id="filter" onclick="showHideStops();" class="btnStyle span3">Pokaż/Ukryj przystanki</button>
        </div> 
</div>
<div class="modal micromodal-slide" id="modal-1" aria-hidden="true">
    <div class="modal__overlay" tabindex="-1" data-micromodal-close>
      <div class="modal__container" role="dialog" aria-modal="true" aria-labelledby="modal-1-title">
        <header class="modal__header">
          <h1 style='font-size:20px;' class="modal__title" id="modal-1-title">
            Wyszukiwanie:
          </h2>
          <button class="modal__close" aria-label="Close modal" data-micromodal-close></button>
        </header>
        <main class="modal__content" id="modal-1-content">
        <div>
            <input type="checkbox" id="onlyMine" name="onlyMine" checked>
            <label for="onlyMine">Pokaż tylko moje obszary</label>
          </div>
          <b><u>Obszar początkowy:</u></b><br/>
          <select id='polygonFrom' class='formSelector'>
          </select>
          <br/><br/>
          <b>Obszar końcowy:</b><br/>
          <select id='polygonTo' class='formSelector'>
          </select>
          <br/><br/>
          <b>Godzina od:</b><br/>
          <input id='timeFrom' type="time" step="900" value="00:00"> <!-- 5 min step -->
          <input id='timeTo' type="time" step="900" value="23:59"> <!-- 5 min step -->
          <br/><br/>
          <b>Dni tygodnia:</b><br/>
          <div>
            <input type="checkbox" id="workingDays" name="workingDays" checked>
            <label for="workingDays">Poniedziałek - Piątek</label>
          </div>
          <div>
            <input type="checkbox" id="saturDay" name="saturDay" checked>
            <label for="saturDay">Sobota</label>
          </div>
          <div>
            <input type="checkbox" id="sunDay" name="sunDay" checked>
            <label for="sunday">Niedziela</label>
          </div>
          <br/>
          <b>Zakres dat: </b><br/>
          <input id='dateFrom' type="date" > <!-- 5 min step -->
          <input id='dateTo' type="date" > <!-- 5 min step -->
          <br/><br/>
       </main>
        <footer class="modal__footer">
          <button class="modal__btn modal__btn-primary" onclick="search();">Szukaj</button>
          <button class="modal__btn" data-micromodal-close aria-label="Zamknij to okno">Anuluj</button>
        </footer>
      </div>
    </div>
  </div>
<script type='text/javascript'>
const checkbox = document.getElementById('onlyMine')

checkbox.addEventListener('change', (event) => {
  reloadPolygons(+event.currentTarget.checked);
})
  async function postData(url = '', data = {}) {
  // Default options are marked with *
  const response = await fetch(url, {
    method: 'POST', // *GET, POST, PUT, DELETE, etc.
    mode: 'cors', // no-cors, *cors, same-origin
    cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached
    credentials: 'same-origin', // include, *same-origin, omit
    headers: {
      'Content-Type': 'application/json',
      'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
      // 'Content-Type': 'application/x-www-form-urlencoded',
    },
    redirect: 'follow', // manual, *follow, error
    referrerPolicy: 'no-referrer', // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url
    body: JSON.stringify(data) // body data type must match "Content-Type" header
  });
  alert('Obszar zapisany poprawnie!')
  return response.json(); // parses JSON response into native JavaScript objects
}
function editRoutes() {
MicroModal.init('modal-1',{awaitCloseAnimation: true});
reloadPolygons(1);
MicroModal.show('modal-1');
}
function showHideStops() {
  if (countVisibleMarkers(window.map)>0) {
    //hide
    map.eachLayer((layer) => {
    if (layer instanceof L.Marker) { layer.remove();}
    });
  } else {
    fetch('https://mobilitytracker.ml/stops')
.then(response => response.json())
.then(data => {
    data.forEach(function(e,i,a) {
   
        var marker = L.marker([e.lat,e.lng]);
        marker.backend_id = e.id;
        marker.bindPopup("Przystanek: <b>"+e.name+"</b><br/>Nazwa skrócona: "+e.shortname+"<br/><br/>Dzielnica: "+(e.district || "---")+"<br/><br/><b>Lat:</b> "+e.lat+"<br/><b>Lng:</b>"+e.lng).addTo(map);

    });
});

  }

}
function reloadPolygons(mine) {
  document.getElementById("polygonFrom").innerHTML = "";
  document.getElementById("polygonTo").innerHTML = "";
  fetch('https://mobilitytracker.ml/polygon/'+mine)
.then(response => response.json())
.then(data => {
  let polygonFrom = document.querySelector('#polygonFrom');
  let polygonTo = document.querySelector('#polygonTo');
  var opt = document.createElement("option");
    opt.value="0";
    opt.text = "wybierz...";
    var opt2= document.createElement("option");
    opt2.value="0";
    opt2.text = "wybierz...";
    polygonFrom.add(opt,null);
    polygonTo.add(opt2,null);

  data.forEach(function(e,i,a) {
    var opt = document.createElement("option");
    opt.value = JSON.stringify(e.polygon);
    opt.text = e.name;
    var opt2 = document.createElement("option");
    opt2.value = JSON.stringify(e.polygon);
    opt2.text = e.name;
    polygonFrom.add(opt,null);
    polygonTo.add(opt2,null);

  });

});
}
function countVisibleMarkers(map) {
    var bounds = map.getBounds();
    var count = 0;

    map.eachLayer(function(layer) {
        if (layer instanceof L.Marker) {
            count++;
         }
    });
    return count;
}
function search() {

  MicroModal.close('modal-1');
//magic happenes here
//JSON.parse
let from;
let to;

window.map.eachLayer((layer) => {
    if(layer instanceof L.Polygon) { 
     
        if (layer.from) {
          from = (layer.getBounds().getCenter());
        }
        if (layer.to) {
          to = (layer.getBounds().getCenter());
//          layer.remove();
        }
      
      }
});
var data2=[{value:1,"from":[from.lng,from.lat],"to":[to.lng,to.lat],"labels":[null,null],"color":"#3388ff"},{value:10,"from":[from.lng,from.lat],"to":[to.lng,to.lat*0.9999],"labels":[null,null],"color":"#FF0000"}];
try {
  migrationLayer.destroy();

} catch (e) {}
var migrationLayer = new L.migrationLayer({
      map: window.map,
      data: [],
      pulseRadius:30,
            pulseBorderWidth:30,
          
            arcLabel:true,
            arcLabelFont:'10px sans-serif',
            maxWidth:100
    });
    migrationLayer.setData(data2);
    migrationLayer.addTo(editableLayers);
    window.map.touchZoom.disable();
window.map.doubleClickZoom.disable();
window.map.scrollWheelZoom.disable();
window.map.boxZoom.disable();
window.map.keyboard.disable();
document.querySelector(".leaflet-control-zoom").style.visibility="hidden";
}

document.addEventListener("DOMContentLoaded", function() {
 


  function clearPolygons(from) {
  map.eachLayer((layer) => {
    if (layer instanceof L.Marker) { layer.remove();}
    if(layer instanceof L.Polygon) { 
      console.log(layer);
      if (from) {
        if (layer.from) {
          layer.remove();
        }
      } else {
        if (layer.to) {
          layer.remove();

        }
      }
      }
});
}
  let polygonFrom = document.querySelector('#polygonFrom');
  let polygonTo = document.querySelector('#polygonTo');
  polygonFrom.addEventListener('change',function(e) {
    clearPolygons(true);
    console.log(e.target.value);
    let pf = L.polygon(JSON.parse(e.target.value),{'color':'#3388ff'});
    pf.bindTooltip("<div style='text-align:center; font-size:16px; color:#3388ff;'><b>"+e.target.options[e.target.selectedIndex].text+"</b></div>",{permanent: true, direction:"center"}).openTooltip();
    pf.from =true;
    pf.addTo(editableLayers);
    map.fitBounds(editableLayers.getBounds());
  })
  polygonTo.addEventListener('change',function(e) {
    console.log(e.target.value);
    clearPolygons(false);
    let pt = L.polygon(JSON.parse(e.target.value),{'color':'red'});
    pt.bindTooltip("<div style='text-align:center; font-size:16px; color:red;'><b>"+e.target.options[e.target.selectedIndex].text+"</b></div>",{permanent: true, direction:"center"}).openTooltip();
    pt.to=true;
    pt.addTo(editableLayers);
    map.fitBounds(editableLayers.getBounds());
  })
let today = new Date();
let oneWeekAgo = new Date();
oneWeekAgo.setTime(today.getTime() - (24*60*60*1000) * 7);

document.getElementById('dateTo').valueAsDate = today;
document.getElementById('dateFrom').valueAsDate = oneWeekAgo;

document.querySelector('#mapComponent').style.height=(document.body.clientHeight-50)+"px";
var map = L.map('mapComponent',{drawControl:false, zoomControl: false }).setView([50.089722,18.530880], 14);
window.map = map;
L.tileLayer('https://api.mapbox.com/styles/v1/{id}/tiles/{z}/{x}/{y}?access_token=pk.eyJ1IjoiaWNkZXZncGFzYWNvbSIsImEiOiJja2xnbjdxZzExaGgzMnltZ2MzYWU4bHFuIn0.XkFyVxXqBWNMViAJW-13UA', {
    attribution: 'Map data &copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors, Imagery © <a href="https://www.mapbox.com/">Mapbox</a>',
    maxZoom: 38,
    id: 'mapbox/streets-v11',
    tileSize: 512,
    zoomOffset: -1,
    accessToken: 'pk.eyJ1IjoiaWNkZXZncGFzYWNvbSIsImEiOiJja2xnbjdxZzExaGgzMnltZ2MzYWU4bHFuIn0.XkFyVxXqBWNMViAJW-13UA'
}).addTo(map);
L.control.zoom({
    position: 'bottomright'
}).addTo(map);
var editableLayers = new L.FeatureGroup();
window.editableLayers = editableLayers;
//map.addLayer(editableLayers);
L.drawLocal.draw.toolbar.actions.title = 'Anuluj';
L.drawLocal.draw.toolbar.actions.text = 'Anuluj';
L.drawLocal.draw.toolbar.finish.title = 'Zakończ';
L.drawLocal.draw.toolbar.finish.text = 'Zakończ';
L.drawLocal.draw.toolbar.undo.title = 'Usuń ostatni punkt';
L.drawLocal.draw.toolbar.undo.text = 'Usuń ostatni punkt';
L.drawLocal.draw.handlers.polygon.tooltip.start = 'Kliknij aby rozpocząć rysowanie';
L.drawLocal.draw.handlers.polygon.tooltip.cont = 'Kliknij aby dodać następny punkt';
L.drawLocal.draw.handlers.polygon.tooltip.end = 'Kliknij w pierwszy punkt aby zakończyć rysowanie obszaru';
L.drawLocal.draw.toolbar.buttons.polygon = 'Kliknij aby dodać nowy obszar';

var options = {
  position: 'bottomright',
  draw: {
    polygon: {
      title : 'Kliknij aby utworzyć nowy obręb',
      allowIntersection: false, // Restricts shapes to simple polygons
      drawError: {
        color: '#e1e100', // Color the shape will turn when intersects
        message: '<strong>Oh snap!<strong> you can\'t draw that!' // Message that will show when intersect
      },
      shapeOptions: {
        color: '#97009c'
      }
    },
    polyline: {
    	shapeOptions: {
        color: '#f357a1',
        weight: 100
          }
    },
    // disable toolbar item by setting it to false
    polyline: false,
    circle: false, // Turns off this drawing tool
    polygon: true,
    marker: false,
    circlemarker: false,
    rectangle: false,
  },
  
};
var drawControl = new L.Control.Draw(options);
map.addControl(drawControl);

var editableLayers = new L.FeatureGroup();
map.addLayer(editableLayers);
function isMarkerInsidePolygon(marker, poly) {
    var inside = false;
    var x = marker.getLatLng().lat, y = marker.getLatLng().lng;
    for (var ii=0;ii<poly.getLatLngs().length;ii++){
        var polyPoints = poly.getLatLngs()[ii];
        for (var i = 0, j = polyPoints.length - 1; i < polyPoints.length; j = i++) {
            var xi = polyPoints[i].lat, yi = polyPoints[i].lng;
            var xj = polyPoints[j].lat, yj = polyPoints[j].lng;

            var intersect = ((yi > y) != (yj > y))
                && (x < (xj - xi) * (y - yi) / (yj - yi) + xi);
            if (intersect) inside = !inside;
        }
    }

    return inside;
};
map.on('draw:created', function(e) {
  var type = e.layerType;
   let layer = e.layer;
  if (type==='polygon') {
   // drawnItems.addLayer(layer);
    let polygon = layer.getLatLngs();
    let polygonLayer = layer;
    console.log(polygon);
    let markers = [];
    map.eachLayer((layer) => {
    if(layer instanceof L.Marker && map.getBounds().contains(polygon)) {
      if (isMarkerInsidePolygon(layer, polygonLayer)) {
        if (layer._popupHandlersAdded) {
          markers.push(layer.backend_id);
        }
      }
    }
  });
  setTimeout(function() {
    let person = prompt("Podaj nazwę obszaru", "");
    console.log("MAMY MARKERY");
    console.log(person);
    console.log(polygon);
    console.log(markers);
    if (person.length<1) {
      alert('Musisz podać nazwę')
    } else {
     map.removeLayer(polygonLayer);
    postData('https://mobilitytracker.ml/polygon', {name: person, polygon: polygon, markers : markers});
     }
   },100);
 }

  if (type === 'polyline') {
    layer.bindPopup('A polyline!');
  } else if ( type === 'polygon') {
    console.log(e);
  	layer.bindPopup('A polygon!');
  } else if (type === 'marker') 
  {layer.bindPopup('marker!');}
  else if (type === 'circle') 
  {layer.bindPopup('A circle!');}
   else if (type === 'rectangle') 
  {layer.bindPopup('A rectangle!');}


  editableLayers.addLayer(layer);
});

fetch('https://mobilitytracker.ml/stops')
.then(response => response.json())
.then(data => {
    data.forEach(function(e,i,a) {
   
        var marker = L.marker([e.lat,e.lng]);
        marker.backend_id = e.id;
        marker.bindPopup("Przystanek: <b>"+e.name+"</b><br/>Nazwa skrócona: "+e.shortname+"<br/><br/>Dzielnica: "+(e.district || "---")+"<br/><br/><b>Lat:</b> "+e.lat+"<br/><b>Lng:</b>"+e.lng).addTo(map);

    });
});


});


</script>

@endsection